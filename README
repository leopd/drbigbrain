** What is DrBigBrain?

DrBigBrain is an open flashcard studying tool.

It is live at http://www.drbigbrain.com/ with a set of lessons for learning to read Chinese.  I hope to incorporate many other lessons as time goes on, and provide tools by which it's easy to add your own lessons. 

The code is django/python with some dojo on the client.  I welcome contributions.
The "learning model" which figures out which card to show the user based on what they've learned so far, is abstracted out of the UI, making it easy to improve.  Currently the only learning models are fairly simple.


** INSTALL NOTES:
Note, your mysql database must have a reasonable character set.

in mysql shell, type "STATUS" command to tell.
if it's latin1, try drop dbbpy and then
create database dbbpy character set = ucs2;

To load all BLCU content, run:
 python flashcards/bulk_loader.py content/vocab-all-blcu.csv


** DREAMHOST NOTES:
The production system is running on Dreamhost.
Pay attention to settings.py on production.
dojango in installed_apps in settings.py causes "Premature end of script headers."

need to add line
	if sys.version < "2.6": os.execl("/home/username/opt/bin/python", "python", *sys.argv)
to passenger_wsgi.py near top to get it to run correct version of python.
(Needs at least 2.4 or something)


** DEVELOPMENT NOTES, TODO ROADMAP:

TODO...
*Most important
! Fix on Android G1 browser -- dojo debug console??
-warn user when the deck is running short of unseen cards and time for more cards
-Show me how far I've gotten on each lesson.  (# in each state)
-use static media files
-move get_model, save_model into deckstate class
-black-box tests


* UX flow
-guest login
-add "about" page
-link to definitions
-note about what happens to new cards and the active deck on lesson picker view
-explain how to install chinese fonts
-warn user if they try to leave with unsubmitted data
-"Submitting..." status bar shouldn't re-arrange other page elements.
-UI candy to show the new card gradually over 0.3s or so.  too jarring now. 

*code cleanup
-studyui only shows buttons that current model is configured for
-break studyui.js into sections or separate files
-encapsulation of login/logout from root urls.py
-refactor get/set_model out of study/views.py -- into deckstate?
-create CardCache class in studyui
-better handling of XHR errors on client. retry, but not forever.
-Use a proper datestamp when the impression was made, rather than committed to db


*new deck manager
-reset option per card (revisit does that?)
-support multiple decks and switching between them
-option to load more than 30 recent cards
-create a new kind of deck -- quiz / review


*better model
-history looks up actual impressions
-model uses timer
-limit timer to 5 minutes.  then ask "you still there?"
-split learning (# of cards to wait) and review (# minutes to wait)
-state machine logic can give hints about how far back
-Ensure that two cards don't show up right next to each other again.  If they're going back in the deck with similar soonest values, then +/- 1.5 to it to make sure there's something else in between


*optimize
-move studyui.html to static media
-move .js and .css out of studyui.
-preload dojo, css on homepage




*More Content
-amharic alphabet
-Organize lessons into a tree
-import cedict
-audio support
-custom widget to choose concepts in a lessonseq
-lesson grouping into topics
-generalize which assettypes to display
-use lessonsequence in learningmodel to derive order
-"card" concept for which types of assets
-hints in studyui


*DnD deck manager
-allow saving of active/discard back to server
-radio-button the selections.  only highlight one total.  not highlight one per column like it does now.
-Don't gray the before/after of the drop target
-break out static .css and .js


*Tests
-Add some tests!
-Black box tests of the whole service, including client
-Test that if I hit "No" over and over again, that I get the same cards back again before too long
-Test that if I hit "Kinda" on some cards, they come back after a while.
-Test that the XHR's from the js client work properly.  (rhino?)

